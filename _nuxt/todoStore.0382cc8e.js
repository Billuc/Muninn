import{d}from"./persistedPinia.b9bd7008.js";const r=d("todos",{state:()=>({todoLists:new Map,nextListId:0}),getters:{getList:o=>t=>{if(!o.todoLists.has(t))throw new Error(`[ToDos] List with ID ${t} not found`);return o.todoLists.get(t)}},actions:{newList(o){this.todoLists.set(this.nextListId,{id:this.nextListId,title:o,todos:new Map,nextTodoId:0}),this.nextListId++},editList(o,t){this.getList(o).title=t},removeList(o){if(!this.todoLists.delete(o))throw new Error(`[ToDos] List with ID ${o} not found`)},newTodo(o,t){const s=this.getList(o);s.todos.set(s.nextTodoId,{id:s.nextTodoId,title:t,done:!1,index:s.todos.size}),s.nextTodoId++},editTodo(o,t,s,e){const i=this.getList(o);if(!i.todos.has(t))throw new Error(`[ToDos] ToDo with ID ${t} not found in list ${i.title}`);i.todos.get(t).title=s,i.todos.get(t).done=e},removeTodo(o,t){const s=this.getList(o);if(!s.todos.delete(t))throw new Error(`[ToDos] ToDo with ID ${t} not found in list ${s.title}`)},orderTodos(o,t){const s=this.getList(o);t.forEach((e,i)=>{if(!s.todos.has(e.id))throw new Error(`[ToDos] ToDo with ID ${e.id} not found in list ${s.title}`);s.todos.get(e.id).index=i})},removeChecked(o){const t=this.getList(o);for(const s of t.todos.keys())t.todos.get(s).done&&t.todos.delete(s)}}});export{r as u};
