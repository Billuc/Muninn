import{B as d}from"./entry.d8fda07f.js";const r=d("todos",{state:()=>({todoLists:{},nextListId:0}),getters:{getList:o=>t=>{if(o.todoLists[t]===void 0)throw new Error(`[ToDos] List with ID ${t} not found`);return o.todoLists[t]}},actions:{newList(o){this.todoLists[this.nextListId]={id:this.nextListId,title:o,todos:{},nextTodoId:0},this.nextListId++},editList(o,t){this.getList(o).title=t},removeList(o){if(this.todoLists[o]===void 0)throw new Error(`[ToDos] List with ID ${o} not found`);delete this.todoLists[o]},newTodo(o,t){const s=this.getList(o);s.todos[s.nextTodoId]={id:s.nextTodoId,title:t,done:!1},s.nextTodoId++},editTodo(o,t,s,i){const e=this.getList(o);if(e.todos[t]===void 0)throw new Error(`[ToDos] ToDo with ID ${t} not found in list ${e.title}`);e.todos[t].title=s,e.todos[t].done=i},removeTodo(o,t){const s=this.getList(o);if(s.todos[t]===void 0)throw new Error(`[ToDos] ToDo with ID ${t} not found in list ${s.title}`);delete s.todos[t]},removeChecked(o){const t=this.getList(o);for(const s of Object.keys(t.todos)){const i=Number(s);t.todos[i].done&&delete t.todos[i]}}},persist:!0});export{r as u};
